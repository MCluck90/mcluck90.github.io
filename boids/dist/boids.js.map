{
  "version": 3,
  "sources": ["../src/canvas.ts", "../src/vector.ts", "../src/boids.ts", "../src/main.ts"],
  "sourcesContent": ["import { Boid, Point } from './types'\n\nexport const canvas = document.querySelector('canvas')!\n\ndocument.addEventListener('resize', () => {})\n\ncanvas.width = canvas.getBoundingClientRect().width\ncanvas.height = canvas.getBoundingClientRect().height\n\nexport const ctx = canvas.getContext('2d')!\n\nfunction rotatePoint(point: Point, center: Point, angle: number) {\n  const sin = Math.sin(angle)\n  const cos = Math.cos(angle)\n\n  point.x -= center.x\n  point.y -= center.y\n\n  const xNew = point.x * cos - point.y * sin\n  const yNew = point.x * sin + point.y * cos\n\n  point.x = xNew + center.x\n  point.y = yNew + center.y\n}\n\nconst lerp = (n1: number, n2: number, amount: number) => {\n  amount = Math.max(amount, 0)\n  amount = Math.min(amount, 1)\n  return n1 + (n2 - n1) * amount\n}\n\nconst previousPositions: Record<string, Point> = {}\nconst previousVelocities: Record<string, Point> = {}\n\nexport const drawBoid = (\n  boid: Boid,\n  size: number,\n  color: string,\n  allowWrapping: boolean\n) => {\n  const previousPosition = previousPositions[boid.id] || {\n    x: boid.velocity.x,\n    y: boid.velocity.y,\n  }\n  previousPositions[boid.id] = previousPosition\n\n  const previousVelocity = previousVelocities[boid.id] || {\n    x: boid.velocity.x,\n    y: boid.velocity.y,\n  }\n  previousVelocities[boid.id] = previousVelocity\n\n  previousPosition.x = lerp(previousPosition.x, boid.position.x, 0.1)\n  previousPosition.y = lerp(previousPosition.y, boid.position.y, 0.1)\n  // Animating gets weird when you can wrap around the screen\n  const position = allowWrapping ? boid.position : previousPosition\n\n  previousVelocity.x = lerp(previousVelocity.x, boid.velocity.x, 0.1)\n  previousVelocity.y = lerp(previousVelocity.y, boid.velocity.y, 0.1)\n\n  const direction = Math.atan2(previousVelocity.y, previousVelocity.x)\n  const tip = {\n    x: position.x + size,\n    y: position.y,\n  }\n  const leftTail = {\n    x: position.x - size / 2,\n    y: position.y - size / 2,\n  }\n  const rightTail = {\n    x: position.x - size / 2,\n    y: position.y + size / 2,\n  }\n  rotatePoint(tip, position, direction)\n  rotatePoint(leftTail, position, direction)\n  rotatePoint(rightTail, position, direction)\n\n  ctx.strokeStyle = color\n  ctx.fillStyle = color\n  ctx.lineWidth = 2\n  ctx.beginPath()\n  ctx.moveTo(tip.x, tip.y)\n  ctx.lineTo(leftTail.x, leftTail.y)\n  ctx.lineTo(rightTail.x, rightTail.y)\n  ctx.lineTo(tip.x, tip.y)\n  ctx.closePath()\n  ctx.stroke()\n  ctx.fill()\n}\n", "import { Point } from './types'\n\nexport class Vector implements Point {\n  x: number\n  y: number\n\n  constructor(x: number = 0, y: number = 0) {\n    this.x = x\n    this.y = y\n  }\n\n  get length() {\n    return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2))\n  }\n\n  toUnit() {\n    return new Vector(this.x / this.length, this.y / this.length)\n  }\n\n  distanceTo(other: Vector) {\n    return Math.sqrt(\n      Math.pow(other.x - this.x, 2) + Math.pow(other.y - this.y, 2)\n    )\n  }\n\n  subtract(other: Vector) {\n    return new Vector(this.x - other.x, this.y - other.y)\n  }\n\n  add(other: Vector) {\n    return new Vector(this.x + other.x, this.y + other.y)\n  }\n\n  mult(n: number) {\n    return new Vector(this.x * n, this.y * n)\n  }\n\n  div(n: number) {\n    return new Vector(this.x / n, this.y / n)\n  }\n\n  clone() {\n    return new Vector(this.x, this.y)\n  }\n}\n", "import { canvas } from './canvas'\nimport { Boid } from './types'\nimport { Vector } from './vector'\n\nfunction uuidv4() {\n  return ([1e7].toString() + -1e3 + -4e3 + -8e3 + -1e11).replace(\n    /[018]/g,\n    (c) =>\n      (\n        Number(c) ^\n        (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4)))\n      ).toString(16)\n  )\n}\n\nexport const createBoid = (x: number, y: number): Boid => {\n  const degrees = Math.random() * 360\n  const radians = degrees * (Math.PI / 180)\n  const position = new Vector(x, y)\n  const velocity = new Vector(Math.cos(radians), Math.sin(radians))\n\n  return {\n    id: uuidv4(),\n    position,\n    velocity,\n  }\n}\n\nexport function moveBoids(\n  boids: Boid[],\n  speed: number,\n  separation: number,\n  alignment: number,\n  cohesion: number,\n  jitter: number,\n  allowWrapping: boolean\n) {\n  const centerSum = boids.reduce((acc, boid) => {\n    acc.x += boid.position.x\n    acc.y += boid.position.y\n    return acc\n  }, new Vector())\n\n  for (const boid of boids) {\n    // Rule 1: Boids try to fly towards the center of mass of neighboring boids\n    // Exclude current boid from supposed center\n    const center = new Vector(\n      (centerSum.x - boid.position.x) / Math.max(boids.length - 1, 1),\n      (centerSum.y - boid.position.y) / Math.max(boids.length - 1, 1)\n    )\n\n    const v1 = new Vector(\n      ((center.x - boid.position.x) / 100) * cohesion,\n      ((center.y - boid.position.y) / 100) * cohesion\n    )\n\n    let v2 = new Vector()\n    let v3 = new Vector()\n    for (const other of boids) {\n      if (other === boid) {\n        continue\n      }\n\n      // Rule 2: Boids try to keep a small distance away from other objects (including other boids)\n      if (boid.position.distanceTo(other.position) < separation) {\n        v2 = v2.subtract(other.position.subtract(boid.position))\n      }\n\n      if (!allowWrapping) {\n        if (boid.position.x < 10) {\n          v2 = v2.subtract(new Vector(-10, 0))\n        } else if (boid.position.x > canvas.width - 10) {\n          v2 = v2.subtract(new Vector(10, 0))\n        }\n        if (boid.position.y < 10) {\n          v2 = v2.subtract(new Vector(0, -10))\n        } else if (boid.position.y > canvas.height - 10) {\n          v2 = v2.subtract(new Vector(0, 10))\n        }\n      }\n\n      // Rule 3: Boids try to match velocity with near boids\n      v3 = v3.add(other.velocity.mult(alignment))\n    }\n\n    v3 = v3.div(Math.max(boids.length - 1, 1))\n\n    const direction = Math.atan2(boid.velocity.y, boid.velocity.x)\n    const newDirection =\n      direction + Math.PI * (jitter * Math.random() * (Math.random() - 0.5))\n    const jitterVector = new Vector(\n      Math.cos(newDirection),\n      Math.sin(newDirection)\n    ).toUnit()\n\n    boid.velocity = boid.velocity\n      .add(v1)\n      .add(v2)\n      .add(v3)\n      .add(jitterVector)\n      .toUnit()\n    boid.position = boid.position.add(boid.velocity.mult(speed))\n  }\n}\n", "import { createBoid, moveBoids } from './boids'\nimport { ctx, drawBoid, canvas } from './canvas'\nimport { Boid } from './types'\n\nconst speedEl = document.getElementById('speed')! as HTMLInputElement\nconst sizeEl = document.getElementById('size')! as HTMLInputElement\nconst populationEl = document.getElementById('population')! as HTMLInputElement\nconst separationEl = document.getElementById('separation')! as HTMLInputElement\nconst alignmentEl = document.getElementById('alignment')! as HTMLInputElement\nconst cohesionEl = document.getElementById('cohesion')! as HTMLInputElement\nconst jitterEl = document.getElementById('jitter')! as HTMLInputElement\nconst allowWrappingEl = document.getElementById(\n  'allowWrapping'\n)! as HTMLInputElement\nconst colorEl = document.getElementById('color')! as HTMLInputElement\n\nconst boids: Boid[] = []\n\nfor (let i = 0; i < Number(populationEl.value); i++) {\n  boids.push(\n    createBoid(Math.random() * canvas.width, Math.random() * canvas.height)\n  )\n}\n\nfunction update(delta: number) {\n  const speed = Number(speedEl.value)\n  const population = Number(populationEl.value)\n  const separation = Number(separationEl.value)\n  const alignment = Number(alignmentEl.value) / 100\n  const cohesion = Number(cohesionEl.value) / 100\n  const jitter = Number(jitterEl.value) / 100\n  const allowWrapping = !!allowWrappingEl.checked\n\n  while (boids.length > population) {\n    boids.pop()\n  }\n  while (boids.length < population) {\n    boids.push(\n      createBoid(Math.random() * canvas.width, Math.random() * canvas.height)\n    )\n  }\n\n  moveBoids(\n    boids,\n    speed * delta,\n    separation,\n    alignment,\n    cohesion,\n    jitter,\n    allowWrapping\n  )\n\n  if (!allowWrapping) {\n    return\n  }\n\n  for (const boid of boids) {\n    if (boid.position.x <= 0) {\n      boid.position.x = canvas.width + boid.position.x\n    } else if (boid.position.x >= canvas.width) {\n      boid.position.x -= canvas.width\n    }\n\n    if (boid.position.y <= 0) {\n      boid.position.y = canvas.height + boid.position.y\n    } else if (boid.position.y >= canvas.height) {\n      boid.position.y -= canvas.height\n    }\n  }\n}\n\nfunction render() {\n  const size = Number(sizeEl.value)\n  const color = colorEl.value\n  const allowWrapping = !!allowWrappingEl.checked\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\n  for (const boid of boids) {\n    drawBoid(boid, size, color, allowWrapping)\n  }\n}\n\nlet prev = +new Date()\nfunction heartbeat() {\n  let now = +new Date()\n  const delta = (now - prev) / 1000\n  update(delta)\n  render()\n  prev = now\n  requestAnimationFrame(heartbeat)\n}\n\nheartbeat()\n"],
  "mappings": ";;AAEO,MAAM,SAAS,SAAS,cAAc;AAE7C,WAAS,iBAAiB,UAAU,MAAM;AAAA;AAE1C,SAAO,QAAQ,OAAO,wBAAwB;AAC9C,SAAO,SAAS,OAAO,wBAAwB;AAExC,MAAM,MAAM,OAAO,WAAW;AAErC,uBAAqB,OAAc,QAAe,OAAe;AAC/D,UAAM,MAAM,KAAK,IAAI;AACrB,UAAM,MAAM,KAAK,IAAI;AAErB,UAAM,KAAK,OAAO;AAClB,UAAM,KAAK,OAAO;AAElB,UAAM,OAAO,MAAM,IAAI,MAAM,MAAM,IAAI;AACvC,UAAM,OAAO,MAAM,IAAI,MAAM,MAAM,IAAI;AAEvC,UAAM,IAAI,OAAO,OAAO;AACxB,UAAM,IAAI,OAAO,OAAO;AAAA;AAG1B,MAAM,OAAO,CAAC,IAAY,IAAY,WAAmB;AACvD,aAAS,KAAK,IAAI,QAAQ;AAC1B,aAAS,KAAK,IAAI,QAAQ;AAC1B,WAAO,KAAM,MAAK,MAAM;AAAA;AAG1B,MAAM,oBAA2C;AACjD,MAAM,qBAA4C;AAE3C,MAAM,WAAW,CACtB,MACA,MACA,OACA,kBACG;AACH,UAAM,mBAAmB,kBAAkB,KAAK,OAAO;AAAA,MACrD,GAAG,KAAK,SAAS;AAAA,MACjB,GAAG,KAAK,SAAS;AAAA;AAEnB,sBAAkB,KAAK,MAAM;AAE7B,UAAM,mBAAmB,mBAAmB,KAAK,OAAO;AAAA,MACtD,GAAG,KAAK,SAAS;AAAA,MACjB,GAAG,KAAK,SAAS;AAAA;AAEnB,uBAAmB,KAAK,MAAM;AAE9B,qBAAiB,IAAI,KAAK,iBAAiB,GAAG,KAAK,SAAS,GAAG;AAC/D,qBAAiB,IAAI,KAAK,iBAAiB,GAAG,KAAK,SAAS,GAAG;AAE/D,UAAM,WAAW,gBAAgB,KAAK,WAAW;AAEjD,qBAAiB,IAAI,KAAK,iBAAiB,GAAG,KAAK,SAAS,GAAG;AAC/D,qBAAiB,IAAI,KAAK,iBAAiB,GAAG,KAAK,SAAS,GAAG;AAE/D,UAAM,YAAY,KAAK,MAAM,iBAAiB,GAAG,iBAAiB;AAClE,UAAM,MAAM;AAAA,MACV,GAAG,SAAS,IAAI;AAAA,MAChB,GAAG,SAAS;AAAA;AAEd,UAAM,WAAW;AAAA,MACf,GAAG,SAAS,IAAI,OAAO;AAAA,MACvB,GAAG,SAAS,IAAI,OAAO;AAAA;AAEzB,UAAM,YAAY;AAAA,MAChB,GAAG,SAAS,IAAI,OAAO;AAAA,MACvB,GAAG,SAAS,IAAI,OAAO;AAAA;AAEzB,gBAAY,KAAK,UAAU;AAC3B,gBAAY,UAAU,UAAU;AAChC,gBAAY,WAAW,UAAU;AAEjC,QAAI,cAAc;AAClB,QAAI,YAAY;AAChB,QAAI,YAAY;AAChB,QAAI;AACJ,QAAI,OAAO,IAAI,GAAG,IAAI;AACtB,QAAI,OAAO,SAAS,GAAG,SAAS;AAChC,QAAI,OAAO,UAAU,GAAG,UAAU;AAClC,QAAI,OAAO,IAAI,GAAG,IAAI;AACtB,QAAI;AACJ,QAAI;AACJ,QAAI;AAAA;;;ACrFC,qBAA8B;AAAA,IAInC,YAAY,IAAY,GAAG,IAAY,GAAG;AACxC,WAAK,IAAI;AACT,WAAK,IAAI;AAAA;AAAA,QAGP,SAAS;AACX,aAAO,KAAK,KAAK,KAAK,IAAI,KAAK,GAAG,KAAK,KAAK,IAAI,KAAK,GAAG;AAAA;AAAA,IAG1D,SAAS;AACP,aAAO,IAAI,OAAO,KAAK,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK;AAAA;AAAA,IAGxD,WAAW,OAAe;AACxB,aAAO,KAAK,KACV,KAAK,IAAI,MAAM,IAAI,KAAK,GAAG,KAAK,KAAK,IAAI,MAAM,IAAI,KAAK,GAAG;AAAA;AAAA,IAI/D,SAAS,OAAe;AACtB,aAAO,IAAI,OAAO,KAAK,IAAI,MAAM,GAAG,KAAK,IAAI,MAAM;AAAA;AAAA,IAGrD,IAAI,OAAe;AACjB,aAAO,IAAI,OAAO,KAAK,IAAI,MAAM,GAAG,KAAK,IAAI,MAAM;AAAA;AAAA,IAGrD,KAAK,GAAW;AACd,aAAO,IAAI,OAAO,KAAK,IAAI,GAAG,KAAK,IAAI;AAAA;AAAA,IAGzC,IAAI,GAAW;AACb,aAAO,IAAI,OAAO,KAAK,IAAI,GAAG,KAAK,IAAI;AAAA;AAAA,IAGzC,QAAQ;AACN,aAAO,IAAI,OAAO,KAAK,GAAG,KAAK;AAAA;AAAA;;;ACtCnC,oBAAkB;AAChB,WAAQ,EAAC,KAAK,aAAa,OAAO,OAAO,OAAO,OAAO,QACrD,UACA,CAAC,MAEG,QAAO,KACN,OAAO,gBAAgB,IAAI,WAAW,IAAI,KAAM,MAAO,OAAO,KAAK,GACpE,SAAS;AAAA;AAIV,MAAM,aAAa,CAAC,GAAW,MAAoB;AACxD,UAAM,UAAU,KAAK,WAAW;AAChC,UAAM,UAAU,UAAW,MAAK,KAAK;AACrC,UAAM,WAAW,IAAI,OAAO,GAAG;AAC/B,UAAM,WAAW,IAAI,OAAO,KAAK,IAAI,UAAU,KAAK,IAAI;AAExD,WAAO;AAAA,MACL,IAAI;AAAA,MACJ;AAAA,MACA;AAAA;AAAA;AAIG,qBACL,QACA,OACA,YACA,WACA,UACA,QACA,eACA;AACA,UAAM,YAAY,OAAM,OAAO,CAAC,KAAK,SAAS;AAC5C,UAAI,KAAK,KAAK,SAAS;AACvB,UAAI,KAAK,KAAK,SAAS;AACvB,aAAO;AAAA,OACN,IAAI;AAEP,eAAW,QAAQ,QAAO;AAGxB,YAAM,SAAS,IAAI,OAChB,WAAU,IAAI,KAAK,SAAS,KAAK,KAAK,IAAI,OAAM,SAAS,GAAG,IAC5D,WAAU,IAAI,KAAK,SAAS,KAAK,KAAK,IAAI,OAAM,SAAS,GAAG;AAG/D,YAAM,KAAK,IAAI,OACX,QAAO,IAAI,KAAK,SAAS,KAAK,MAAO,UACrC,QAAO,IAAI,KAAK,SAAS,KAAK,MAAO;AAGzC,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,IAAI;AACb,iBAAW,SAAS,QAAO;AACzB,YAAI,UAAU,MAAM;AAClB;AAAA;AAIF,YAAI,KAAK,SAAS,WAAW,MAAM,YAAY,YAAY;AACzD,eAAK,GAAG,SAAS,MAAM,SAAS,SAAS,KAAK;AAAA;AAGhD,YAAI,CAAC,eAAe;AAClB,cAAI,KAAK,SAAS,IAAI,IAAI;AACxB,iBAAK,GAAG,SAAS,IAAI,OAAO,KAAK;AAAA,qBACxB,KAAK,SAAS,IAAI,OAAO,QAAQ,IAAI;AAC9C,iBAAK,GAAG,SAAS,IAAI,OAAO,IAAI;AAAA;AAElC,cAAI,KAAK,SAAS,IAAI,IAAI;AACxB,iBAAK,GAAG,SAAS,IAAI,OAAO,GAAG;AAAA,qBACtB,KAAK,SAAS,IAAI,OAAO,SAAS,IAAI;AAC/C,iBAAK,GAAG,SAAS,IAAI,OAAO,GAAG;AAAA;AAAA;AAKnC,aAAK,GAAG,IAAI,MAAM,SAAS,KAAK;AAAA;AAGlC,WAAK,GAAG,IAAI,KAAK,IAAI,OAAM,SAAS,GAAG;AAEvC,YAAM,YAAY,KAAK,MAAM,KAAK,SAAS,GAAG,KAAK,SAAS;AAC5D,YAAM,eACJ,YAAY,KAAK,KAAM,UAAS,KAAK,WAAY,MAAK,WAAW;AACnE,YAAM,eAAe,IAAI,OACvB,KAAK,IAAI,eACT,KAAK,IAAI,eACT;AAEF,WAAK,WAAW,KAAK,SAClB,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,cACJ;AACH,WAAK,WAAW,KAAK,SAAS,IAAI,KAAK,SAAS,KAAK;AAAA;AAAA;;;ACjGzD,MAAM,UAAU,SAAS,eAAe;AACxC,MAAM,SAAS,SAAS,eAAe;AACvC,MAAM,eAAe,SAAS,eAAe;AAC7C,MAAM,eAAe,SAAS,eAAe;AAC7C,MAAM,cAAc,SAAS,eAAe;AAC5C,MAAM,aAAa,SAAS,eAAe;AAC3C,MAAM,WAAW,SAAS,eAAe;AACzC,MAAM,kBAAkB,SAAS,eAC/B;AAEF,MAAM,UAAU,SAAS,eAAe;AAExC,MAAM,QAAgB;AAEtB,WAAS,IAAI,GAAG,IAAI,OAAO,aAAa,QAAQ,KAAK;AACnD,UAAM,KACJ,WAAW,KAAK,WAAW,OAAO,OAAO,KAAK,WAAW,OAAO;AAAA;AAIpE,kBAAgB,OAAe;AAC7B,UAAM,QAAQ,OAAO,QAAQ;AAC7B,UAAM,aAAa,OAAO,aAAa;AACvC,UAAM,aAAa,OAAO,aAAa;AACvC,UAAM,YAAY,OAAO,YAAY,SAAS;AAC9C,UAAM,WAAW,OAAO,WAAW,SAAS;AAC5C,UAAM,SAAS,OAAO,SAAS,SAAS;AACxC,UAAM,gBAAgB,CAAC,CAAC,gBAAgB;AAExC,WAAO,MAAM,SAAS,YAAY;AAChC,YAAM;AAAA;AAER,WAAO,MAAM,SAAS,YAAY;AAChC,YAAM,KACJ,WAAW,KAAK,WAAW,OAAO,OAAO,KAAK,WAAW,OAAO;AAAA;AAIpE,cACE,OACA,QAAQ,OACR,YACA,WACA,UACA,QACA;AAGF,QAAI,CAAC,eAAe;AAClB;AAAA;AAGF,eAAW,QAAQ,OAAO;AACxB,UAAI,KAAK,SAAS,KAAK,GAAG;AACxB,aAAK,SAAS,IAAI,OAAO,QAAQ,KAAK,SAAS;AAAA,iBACtC,KAAK,SAAS,KAAK,OAAO,OAAO;AAC1C,aAAK,SAAS,KAAK,OAAO;AAAA;AAG5B,UAAI,KAAK,SAAS,KAAK,GAAG;AACxB,aAAK,SAAS,IAAI,OAAO,SAAS,KAAK,SAAS;AAAA,iBACvC,KAAK,SAAS,KAAK,OAAO,QAAQ;AAC3C,aAAK,SAAS,KAAK,OAAO;AAAA;AAAA;AAAA;AAKhC,oBAAkB;AAChB,UAAM,OAAO,OAAO,OAAO;AAC3B,UAAM,QAAQ,QAAQ;AACtB,UAAM,gBAAgB,CAAC,CAAC,gBAAgB;AACxC,QAAI,UAAU,GAAG,GAAG,IAAI,OAAO,OAAO,IAAI,OAAO;AAEjD,eAAW,QAAQ,OAAO;AACxB,eAAS,MAAM,MAAM,OAAO;AAAA;AAAA;AAIhC,MAAI,OAAO,CAAC,IAAI;AAChB,uBAAqB;AACnB,QAAI,MAAM,CAAC,IAAI;AACf,UAAM,QAAS,OAAM,QAAQ;AAC7B,WAAO;AACP;AACA,WAAO;AACP,0BAAsB;AAAA;AAGxB;",
  "names": []
}
