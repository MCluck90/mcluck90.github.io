{
  "version": 3,
  "sources": ["../src/vector.ts", "../src/boids.ts", "../src/canvas.ts", "../src/main.ts"],
  "sourcesContent": ["import { Point } from './types'\n\nexport class Vector implements Point {\n  x: number\n  y: number\n\n  constructor(x: number = 0, y: number = 0) {\n    this.x = x\n    this.y = y\n  }\n\n  get length() {\n    return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2))\n  }\n\n  toUnit() {\n    return new Vector(this.x / this.length, this.y / this.length)\n  }\n\n  distanceTo(other: Vector) {\n    return Math.sqrt(\n      Math.pow(other.x - this.x, 2) + Math.pow(other.y - this.y, 2)\n    )\n  }\n\n  subtract(other: Vector) {\n    return new Vector(this.x - other.x, this.y - other.y)\n  }\n\n  add(other: Vector) {\n    return new Vector(this.x + other.x, this.y + other.y)\n  }\n\n  mult(n: number) {\n    return new Vector(this.x * n, this.y * n)\n  }\n\n  div(n: number) {\n    return new Vector(this.x / n, this.y / n)\n  }\n}\n", "import { Boid } from './types'\nimport { Vector } from './vector'\n\nexport const createBoid = (x: number, y: number): Boid => {\n  const degrees = Math.random() * 360\n  const radians = degrees * (Math.PI / 180)\n  return {\n    position: new Vector(x, y),\n    velocity: new Vector(Math.cos(radians), Math.sin(radians)),\n  }\n}\n\nexport function moveBoids(\n  boids: Boid[],\n  speed: number,\n  separation: number,\n  alignment: number,\n  cohesion: number\n) {\n  const centerSum = boids.reduce((acc, boid) => {\n    acc.x += boid.position.x\n    acc.y += boid.position.y\n    return acc\n  }, new Vector())\n\n  for (const boid of boids) {\n    // Rule 1: Boids try to fly towards the center of mass of neighboring boids\n    // Exclude current boid from supposed center\n    const center = new Vector(\n      (centerSum.x - boid.position.x) / (boids.length - 1),\n      (centerSum.y - boid.position.y) / (boids.length - 1)\n    )\n\n    const v1 = new Vector(\n      ((center.x - boid.position.x) / 100) * cohesion,\n      ((center.y - boid.position.y) / 100) * cohesion\n    )\n\n    // Rule 2: Boids try to keep a small distance away from other objects (including other boids)\n    let v2 = new Vector()\n    for (const other of boids) {\n      if (other === boid) {\n        continue\n      }\n\n      if (boid.position.distanceTo(other.position) < separation) {\n        v2 = v2.subtract(other.position.subtract(boid.position))\n      }\n    }\n\n    // Rule 3: Boids try to match velocity with near boids\n    let v3 = new Vector()\n    for (const other of boids) {\n      if (other === boid) {\n        continue\n      }\n\n      v3 = v3.add(other.velocity.mult(alignment))\n    }\n    v3 = v3.div(boids.length - 1)\n\n    boid.velocity = boid.velocity.add(v1).add(v2).add(v3).toUnit()\n    boid.position = boid.position.add(boid.velocity.mult(speed))\n  }\n}\n", "import { Boid, Point } from './types'\n\nexport const canvas = document.querySelector('canvas')!\n\ndocument.addEventListener('resize', () => {})\n\ncanvas.width = canvas.getBoundingClientRect().width\ncanvas.height = canvas.getBoundingClientRect().height\n\nexport const ctx = canvas.getContext('2d')!\n\nfunction rotatePoint(point: Point, center: Point, angle: number) {\n  const sin = Math.sin(angle)\n  const cos = Math.cos(angle)\n\n  point.x -= center.x\n  point.y -= center.y\n\n  const xNew = point.x * cos - point.y * sin\n  const yNew = point.x * sin + point.y * cos\n\n  point.x = xNew + center.x\n  point.y = yNew + center.y\n}\n\nexport const drawBoid = (boid: Boid) => {\n  const direction = Math.atan2(boid.velocity.y, boid.velocity.x)\n  const length = 10\n  const tip = {\n    x: boid.position.x + length,\n    y: boid.position.y,\n  }\n  const leftTail = {\n    x: boid.position.x - length / 2,\n    y: boid.position.y - length / 2,\n  }\n  const rightTail = {\n    x: boid.position.x - length / 2,\n    y: boid.position.y + length / 2,\n  }\n  rotatePoint(tip, boid.position, direction)\n  rotatePoint(leftTail, boid.position, direction)\n  rotatePoint(rightTail, boid.position, direction)\n\n  ctx.strokeStyle = 'white'\n  ctx.fillStyle = 'white'\n  ctx.lineWidth = 2\n  ctx.beginPath()\n  ctx.moveTo(tip.x, tip.y)\n  ctx.lineTo(leftTail.x, leftTail.y)\n  ctx.lineTo(rightTail.x, rightTail.y)\n  ctx.lineTo(tip.x, tip.y)\n  ctx.closePath()\n  ctx.stroke()\n  ctx.fill()\n}\n", "import { createBoid, moveBoids } from './boids'\nimport { ctx, drawBoid, canvas } from './canvas'\nimport { Boid } from './types'\n\nconst speedEl = document.getElementById('speed')! as HTMLInputElement\nconst separationEl = document.getElementById('separation')! as HTMLInputElement\nconst alignmentEl = document.getElementById('alignment')! as HTMLInputElement\nconst cohesionEl = document.getElementById('cohesion')! as HTMLInputElement\n\nconst boids: Boid[] = []\n\nfor (let i = 0; i < 50; i++) {\n  boids.push(\n    createBoid(Math.random() * canvas.width, Math.random() * canvas.height)\n  )\n}\n\nfunction update(delta: number) {\n  const speed = Number(speedEl.value)\n  const separation = Number(separationEl.value)\n  const alignment = Number(alignmentEl.value) / 100\n  const cohesion = Number(cohesionEl.value) / 100\n\n  moveBoids(boids, speed * delta, separation, alignment, cohesion)\n\n  // Wrap around the screen\n  for (const boid of boids) {\n    if (boid.position.x <= 0) {\n      boid.position.x = canvas.width + boid.position.x\n    } else if (boid.position.x >= canvas.width) {\n      boid.position.x -= canvas.width\n    }\n\n    if (boid.position.y <= 0) {\n      boid.position.y = canvas.height + boid.position.y\n    } else if (boid.position.y >= canvas.height) {\n      boid.position.y -= canvas.height\n    }\n  }\n}\n\nfunction render() {\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\n  for (const boid of boids) {\n    drawBoid(boid)\n  }\n}\n\nlet prev = +new Date()\nfunction heartbeat() {\n  let now = +new Date()\n  const delta = (now - prev) / 1000\n  update(delta)\n  render()\n  prev = now\n  requestAnimationFrame(heartbeat)\n}\n\nheartbeat()\n"],
  "mappings": "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",
  "names": []
}
